# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
   config.vm.box = "Packer-Vagrant-CentOS-7-x86_64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = true

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 22, host: 2222

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

   config.vm.boot_timeout = 600

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
      vb.gui = true
     # Customize Name of VM:
      vb.name = "Packer-Vagrant-CentOS-7-x86_64"
     # Customize the amount of memory on the VM:
      vb.memory = "4096"
     # Customize video memory
      vb.customize ["modifyvm", :id, "--vram", "32"]
     # Enable 3D acceleration:
     # vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
     # Shared Clipboard
      vb.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
     # Enable Drag and Drop
      vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
     # Enable Remote Display
      vb.customize ["modifyvm", :id, "--vrde", "on"]
      vb.customize ["modifyvm", :id, "--vrdeport", "5000,5010-5012"]
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
    # Enable graphical mode
    sudo yum -y groupinstall "GNOME Desktop"
    sudo systemctl set-default graphical.target
    sudo systemctl start graphical.target

    # Other
    sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    sudo yum -y install gcc make git python-setuptools python-pip policycoreutils-python traceroute unzip vim wget zip

    # Install visual studio code
    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    sudo yum -y check-update
    sudo yum -y install code

    # Installing Terraform
    sudo wget https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip -O /tmp/terraform_linux_amd64.zip
    sudo cd /usr/local/bin && sudo unzip /tmp/terraform_linux_amd64.zip

    # Installing packer
    sudo wget https://releases.hashicorp.com/packer/1.2.5/packer_1.2.5_linux_amd64.zip -O /tmp/packer_linux_amd64.zip
    sudo cd /usr/local/bin && sudo unzip /tmp/packer_linux_amd64.zip

    # Remove files
    sudo rm -f /tmp/packer_linux_amd64.zip /tmp/terraform_linux_amd64.zip

    # Install Chrome Browser
    sudo sh -c 'echo -e "[google-chrome]\nname=google-chrome\nbaseurl=http://dl.google.com/linux/chrome/rpm/stable/\\$basearch\nenabled=1\ngpgcheck=1\ngpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub" > /etc/yum.repos.d/google-chrome.repo'
    sudo yum info google-chrome-stable
    sudo yum -y install google-chrome-stable

    # Install awscli, jinja2
    sudo pip install --upgrade awscli
    sudo pip install --upgrade jinja2
      
    # Erase gnome-classic
    yum -y erase gnome-classic-session
      
    # Yum upgrade
    sudo yum -y upgrade
   SHELL
  
  # Running Provisioners Always
  config.vm.provision "shell", run: "always" do |s|
    s.inline = "sudo yum-complete-transaction --cleanup-only && sudo yum -y update"
   end

  # Running Provisioners Always
   config.vm.provision "shell", run: "always", inline: <<-SHELL
      sudo yum -y upgrade
   SHELL
end